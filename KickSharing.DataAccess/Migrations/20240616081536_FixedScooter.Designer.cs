// <auto-generated />
using System;
using KickSharing.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KickSharing.DataAccess.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240616081536_FixedScooter")]
    partial class FixedScooter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("KickSharing.DataAccess.Models.Price", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("MinutePrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = "7b8f98a9-e541-43ff-aadf-7c1f2f91e7ef",
                            CreatedDateTime = new DateTime(2024, 6, 16, 8, 15, 35, 936, DateTimeKind.Utc).AddTicks(7006),
                            MinutePrice = 5.0
                        });
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.Rent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinishLatitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinishLongitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScooterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartLatitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartLongitude")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("ScooterId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.Scooter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChargePercent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Longitude")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("Scooters");

                    b.HasData(
                        new
                        {
                            Id = "4100811c-bfed-4fe6-b047-3f980df104ce",
                            ChargePercent = 100,
                            CreatedDateTime = new DateTime(2024, 6, 16, 8, 15, 35, 936, DateTimeKind.Utc).AddTicks(7299),
                            Identifier = "AA0001",
                            IsBlocked = false
                        });
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPhoneVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "aa4995d2-d1b4-4e3e-a8d2-51271a5ce49f",
                            CreatedDateTime = new DateTime(2024, 6, 16, 8, 15, 35, 936, DateTimeKind.Utc).AddTicks(7157),
                            DateBirth = new DateTime(2003, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmitry_yalchik@mail.ru",
                            IsBlocked = false,
                            IsEmailVerified = true,
                            IsPhoneVerified = true,
                            Name = "Admin",
                            Phone = "78005553535",
                            Role = 2
                        });
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.Rent", b =>
                {
                    b.HasOne("KickSharing.DataAccess.Models.Price", "Price")
                        .WithMany("Rents")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickSharing.DataAccess.Models.Scooter", "Scooter")
                        .WithMany("Rents")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KickSharing.DataAccess.Models.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("Scooter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.Price", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.Scooter", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("KickSharing.DataAccess.Models.User", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
